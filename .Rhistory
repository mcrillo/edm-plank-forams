legend(x = "topleft", legend = c("X_xmap_Y", "Y_xmap_X"), col = c("red", "blue"),
cex=1.1,lwd=2, inset = 0.02)
ssp_x
X
Y
Y
X
X <- scale(X)
Y <- scale(Y)
///y
X
Y
source("https://raw.githubusercontent.com/mathbio/edmTutorials/master/utilities/make_block.R")
# max_lag is the optimal embedding dimension
ssp_x <- c("G_ruber_pink")
ssp_y <- c("G_ruber_white")
embed[which(embed$species %in% c(ssp_x, ssp_y)),]
X <- c(data_ts[,which(colnames(data_ts) == ssp_x)])
Y <- c(data_ts[,which(colnames(data_ts) == ssp_y)])
paste("Total flux",ssp_x, sum(X, na.rm=T), "shells")
paste("Total flux",ssp_y, sum(Y, na.rm=T), "shells")
# Normalizing to mean 0 and unit variance 1
X <- scale(X)
Y <- scale(Y)
Y
X
fit<-lm(Y ~ X)
plot(X,Y,main='Correlation (X,Y)')
abline(0,1,lty=2)
abline(fit$coefficients[1],fit$coefficients[2])
legend(x = "bottomright", legend = paste('r =',round(cor(X,Y, use = "complete.obs"),2)))
XY<-as.data.frame(cbind(X,Y))
Shadow_MXY <- make_block(XY,max_lag = 2) # emax_eye = 2
names(Shadow_MXY) <- c("time","X","X_1","Y","Y_1")
head(Shadow_MXY)
Shadow_MX<-Shadow_MXY[,2:3]
Shadow_MY<-Shadow_MXY[,4:5]
head(Shadow_MX)
head(Shadow_MY)
predictor<-60
print(Y[predictor])
dist.matrix_X <- as.matrix(dist(Shadow_MX, upper=TRUE)) # matrix of distances among all states of MX
neigb_X <- order(dist.matrix_X[predictor,])[2:4] # then we select the Emax+1 nearest neighbours within the MX, creating the simplex_Mx.
print(paste('simplex_Mx time steps:',list(neigb_X)))
lib <- c(1, NROW(Shadow_MXY))  # cross-mapping process starts by finding (mapping) the simplex_Mx onto MY, creating the simplex_My. Note that simplex_My has the same indexes as simplex_Mx.
?block_lnlp
NROW(Shadow_MXY)
observed_all_Y <- block_lnlp_output_XY$model_output[[1]]$obs
predicted_all_Y <- block_lnlp_output_XY$model_output[[1]]$pred
pred_obs_Y<-as.data.frame(cbind(predicted_all_Y,observed_all_Y)) #
colnames(pred_obs_Y)<-c('Predicted Y','Observed Y')
head(pred_obs_Y)
pred_obs_Y[(predictor-2),]
fit_YX<-lm(predicted_all_Y ~ observed_all_Y)
plot_range <- range(c(observed_all_Y, predicted_all_Y), na.rm = TRUE)
plot(x=observed_all_Y,y=predicted_all_Y, xlim = plot_range, ylim = plot_range, xlab = "Observed Y",
ylab = "Predicted Y", main='X cross-map Y')
abline(fit_YX$coefficients[1],fit_YX$coefficients[2])
abline(0,1,lty=2)
legend(x = "topleft", legend = paste('r =',round(cor(observed_all_Y, predicted_all_Y,use = "complete.obs"),2)),inset = 0.02,col = 'black')
cor(observed_all_Y, predicted_all_Y,use = "complete.obs")
lib<-lib <- c(1, NROW(Shadow_MXY))
block_lnlp_output_YX <- block_lnlp(Shadow_MXY, lib = lib, pred = lib, columns = c("Y", "Y_1"),target_column = "X", stats_only = FALSE, first_column_time = TRUE)
observed_all_X <- block_lnlp_output_YX$model_output[[1]]$obs
predicted_all_X <- block_lnlp_output_YX$model_output[[1]]$pred
pred_obs_X<-as.data.frame(cbind(predicted_all_X,observed_all_X))
colnames(pred_obs_X)<-c('Predicted X','Observed X')
head(pred_obs_X)
fit_XY<-lm(predicted_all_X ~ observed_all_X)
plot_range <- range(c(observed_all_X, predicted_all_X), na.rm = TRUE)
plot(observed_all_X, predicted_all_X, xlim = plot_range, ylim = plot_range,
xlab = "Observed X", ylab = "Predicted X", main='Y cross-map X')
abline(fit_XY$coefficients[1],fit_XY$coefficients[2])
abline(0,1,lty=2)
legend(x = "bottomright", legend = paste('r =',round(cor(observed_all_Y, predicted_all_Y,use = "complete.obs"),2)),inset = 0.02,col = 'black')
observed_pred_X<-observed_all_X[predictor-2]
predicted_pred_X<-predicted_all_X[predictor-2]
points(observed_pred_X,predicted_pred_X,col='red',pch=16,cex=1.2)
plot(Y~X)
plot(observed_all_Y~observed_all_X)
plot(precidted_all_Y~predicted_all_X)
plot(predicted_all_Y~predicted_all_X)
cor(observed_all_Y, predicted_all_Y,use = "complete.obs")
XY
c(1, NROW(Shadow_MXY))
seq(10, 170, by = 10)
ccm(XY, E = 2, lib_column = "X", target_column = "Y",
lib_sizes = seq(10, 170, by = 10), num_samples = 100, random_libs = TRUE,
replace = TRUE)
setwd("/Users/marinacostarillo/Google Drive/PhD/projects")
library(rEDM)
library(corrplot)
setwd("./time-series-forams/")
data_plankton<-read.csv("data/GOM/GOM_edm_use.csv", header = T, na = "NA") #loading the data frames, placing any NA as a NA chr#
data_plankton_ts<-ts(data_plankton[,4:19]) #only taking the interests series, from planktons and setting them as timeseries#
data_plankton_df<-as.data.frame(data_plankton) #turning into data frame, better format to the algorithms#
plot(data_plankton_ts[,c(2:11)], main = "plot of plankton series") #plottings#
plot(data_plankton_ts[,c(12:16)], main = "plot of plankton series") #same as above#
used<-c("everything", "all.obs", "complete.obs", "na.or.complete","pairwise.complete.obs")
cor_plankton_ts<-cor(data_plankton_ts[,c(2:16)], use = used[4], method = "pearson")
corrplot(cor_plankton_ts, method = "square", title = "data_plankton_ts")
theta1<-c()
sp<-colnames(data_plankton_ts)
par(mfrow = c(1,1), mar = c(4,4,1,1), mgp =  c(2.5,1,0))
for (i in 2:16) {
nome<-sp[i]
lib<-c(1, NROW(data_plankton_ts[,i]))
pred<-lib
s_map_output<-s_map(as.data.frame(data_plankton_ts)[,i],
lib = lib,
pred = pred,
E = Emb1[i],
theta = c(0, 1e-04, 3e-04, 0.001,0.003, 0.01, 0.03, 0.1, 0.3, 0.5, 0.75, 1, 1.5, 2, 3, 4, 6, 8),
silent = TRUE,
save_smap_coefficients = TRUE)
#savename<-paste("output/theta/theta_",sep = "", nome, ".png") #saving name to be set on the archive and as title of the plot#
#png(savename, width = 800, height = 600) #png ambient to save the figure as a png figure#
#plot(s_map_output$theta, s_map_output$rho, type = "b", xlab = expression(paste("Theta (", sep = "", theta, ")")),
#    ylab = expression(paste(sep = "",rho)), main = nome , cex.lab = 1.5)
thetamax<-which.max(s_map_output$rho)
#lines(rho[thetamax]~theta[thetamax], data = s_map_output, type = "b", col = "red", lwd = 2, pch = 19)
theta1[i]<-thetamax
#dev.off()
}
tp_simplex1<- "default"
Emb1<-c() #embedding vector#
sp<-colnames(data_plankton_ts) #picking the colnames#
par(mfrow = c(1,1),mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0)) #parameters to the plots#
for(i in 2:16){ ##to run over all species of planktons##
nome<-sp[i] #name variable to set plot with it#
lib<-c(1, NROW(data_plankton_ts[,i])) #defining the lib size used to simplex algorithmic#
pred<-lib #same as above#
simplex_output<-simplex(as.data.frame(data_plankton_ts)[,i],
lib = lib,
pred = pred,
E = 2:10,
silent = TRUE,
tp = tp_simplex1
) #simplex method function calling#
#par(mfrow = c(1,1),mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))
#savename<-paste("~/Dropbox/plankton_marina/data/embeddings/embedding_",sep = "", nome, tp_simplex1, ".png") #saving name to be set on the archive and as title of the plot#
#png(savename, width = 800, height = 600) #png ambient to save the figure as a png figure#
#plot(simplex_output$E, simplex_output$rho, type = "b", xlab = "Dimensão de Embedding (E)",
#     ylab = expression(paste(sep = "",rho)), main = paste(nome, sep = "_tp_",tp_simplex1), cex.lab=1.5) #plot function with extra parameters to plotting#
emax<-which.max(simplex_output$rho) #picking the maximum of embedding dimension#
#lines(rho[emax] ~ E[emax], data = simplex_output, type = "b", col  =  "red", lwd=2, pch=19) #setting the maximum emebedding dimension on the plot#
Emb1[i]<-emax #placing the maximum into the embedding vector for the record and future uses#
#dev.off() #shutting down the png ambient#
}
Emb
Emb1
theta1<-c()
sp<-colnames(data_plankton_ts)
par(mfrow = c(1,1), mar = c(4,4,1,1), mgp =  c(2.5,1,0))
for (i in 2:16) {
nome<-sp[i]
lib<-c(1, NROW(data_plankton_ts[,i]))
pred<-lib
s_map_output<-s_map(as.data.frame(data_plankton_ts)[,i],
lib = lib,
pred = pred,
E = Emb1[i],
theta = c(0, 1e-04, 3e-04, 0.001,0.003, 0.01, 0.03, 0.1, 0.3, 0.5, 0.75, 1, 1.5, 2, 3, 4, 6, 8),
silent = TRUE,
save_smap_coefficients = TRUE)
#savename<-paste("output/theta/theta_",sep = "", nome, ".png") #saving name to be set on the archive and as title of the plot#
#png(savename, width = 800, height = 600) #png ambient to save the figure as a png figure#
#plot(s_map_output$theta, s_map_output$rho, type = "b", xlab = expression(paste("Theta (", sep = "", theta, ")")),
#    ylab = expression(paste(sep = "",rho)), main = nome , cex.lab = 1.5)
thetamax<-which.max(s_map_output$rho)
#lines(rho[thetamax]~theta[thetamax], data = s_map_output, type = "b", col = "red", lwd = 2, pch = 19)
theta1[i]<-thetamax
#dev.off()
}
theta1
##data_plankton_ts
E_n1<-as.data.frame(matrix(data = NA, nrow = 14, ncol = 15))
sp<-colnames(data_plankton_ts)
colnames(E_n1)<-sp[2:16]
for (i in 2:15) { ##To run over each species##
for (j in 2:16) { ##To run over each species differing from the first one##
if(i == j)next
sp<-colnames(data_plankton_ts)
E_max_ccm<-data.frame()
#E_max_ccm<-colnames(sp[2:16])
E.test.1=NULL
par(mfrow = c(1,1), mar = c(4,4,1,1), mgp =  c(2.5,1,0))
cmxy.t<-list()
for(E.t in 2:10){ ##to run over different embedding dimensions##
cmxy.t <- ccm(data_plankton_ts, E = E.t, lib_column = sp[i], target_column = sp[j],
lib_sizes = 203, num_samples = 1, tp=-1,random_libs = F, silent = TRUE)
E.test.1=rbind(E.test.1,cmxy.t)
}
E_n1[i-1, j-1] <- which.max(E.test.1$rho) # the optimal E
plot(E.test.1$E, E.test.1$rho, type = "b",
ylab = expression(paste(sep = "", rho)),
xlab = "dimensão de Embedding (E)",
main = paste(sp[i], sep = "_", "xmap", sp[j]))
lines(rho[E_n1[i-1, j-1]]~E[E_n1[i-1, j-1]], data = E.test.1, type = "b", col =  "red", lwd = 2, pch = 19)
}
}
# CCM analysis with varying library size (L)
#libs<-c(1, NROW(data_plankton_ts[,i]))
##CCM from each species to SST###
par(mfrow = c(1,1), mar = c(4,4,1,1), mgp =  c(2.5,1,0))
for (i in 2:15) { ##To run over each species##
spi_xmap_spj <- ccm(data_plankton_ts, E=E_n1[i-1, j-1],lib_column=sp[i], target_column="sst",
lib_sizes=seq(1,203, by = 10), replace=T, silent = TRUE)
spi_xmap_spj_means<-ccm_means(spi_xmap_spj)
plot(spi_xmap_spj_means$lib_size, pmax(0, spi_xmap_spj_means$rho),
data = spi_xmap_spj_means,
type = "l",
xlab = "Library size (L)",
ylab = expression(paste("Mapping skil (", sep = "", rho, ")")),
col = "red",
main = paste(sp[i], sep = "_", "xmap_sst"),
lwd = 2,
pch = 19,
cex.lab = 1.5)
#abline()
}
warnings()
par(mfrow = c(1,1), mar = c(4,4,1,1), mgp =  c(2.5,1,0))
for (i in 2:15) { ##To run over each species##
for (j in 2:15) {
if(i == j)next
spi_xmap_spj <- ccm(data_plankton_ts, E=E_n1[i-1, j-1],lib_column=sp[i], target_column=sp[j],
lib_sizes=seq(1,203, by = 10), replace=T, silent = TRUE)
spi_xmap_spj_means<-ccm_means(spi_xmap_spj)
plot(spi_xmap_spj_means$lib_size, pmax(0, spi_xmap_spj_means$rho),
data = spi_xmap_spj_means,
type = "l",
xlab = "Library size (L)",
ylab = expression(paste("Mapping skil (", sep = "", rho, ")")),
col = "red",
main = paste(sp[i], sep = "_", "xmap", sp[j]),
lwd = 2,
pch = 19,
cex.lab = 1.5)
#abline()
}
}
rm(list=ls())
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/projects")
library(rEDM)
library(corrplot)
setwd("./time-series-forams/")
data_plankton<-read.csv("data/GOM/GOM_edm_use.csv", header = T, na = "NA") #loading the data frames, placing any NA as a NA chr#
data_plankton_ts<-ts(data_plankton[,4:19]) #only taking the interests series, from planktons and setting them as timeseries#
data_plankton_df<-as.data.frame(data_plankton) #turning into data frame, better format to the algorithms#
?simplex
tp_simplex1<- "default"
Emb1<-c() #embedding vector#
sp<-colnames(data_plankton_ts) #picking the colnames#
par(mfrow = c(1,1),mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0)) #parameters to the plots#
for(i in 2:16){ ##to run over all species of planktons##
nome<-sp[i] #name variable to set plot with it#
lib<-c(1, NROW(data_plankton_ts[,i])) #defining the lib size used to simplex algorithmic#
pred<-lib #same as above#
simplex_output<-simplex(as.data.frame(data_plankton_ts)[,i],
lib = lib,
pred = pred,
E = 2:10,
silent = TRUE,
tp = tp_simplex1
) #simplex method function calling#
#par(mfrow = c(1,1),mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))
#savename<-paste("~/Dropbox/plankton_marina/data/embeddings/embedding_",sep = "", nome, tp_simplex1, ".png") #saving name to be set on the archive and as title of the plot#
#png(savename, width = 800, height = 600) #png ambient to save the figure as a png figure#
#plot(simplex_output$E, simplex_output$rho, type = "b", xlab = "Dimensão de Embedding (E)",
#     ylab = expression(paste(sep = "",rho)), main = paste(nome, sep = "_tp_",tp_simplex1), cex.lab=1.5) #plot function with extra parameters to plotting#
emax<-which.max(simplex_output$rho) #picking the maximum of embedding dimension#
#lines(rho[emax] ~ E[emax], data = simplex_output, type = "b", col  =  "red", lwd=2, pch=19) #setting the maximum emebedding dimension on the plot#
Emb1[i]<-emax #placing the maximum into the embedding vector for the record and future uses#
#dev.off() #shutting down the png ambient#
}
data.frame(sp,Emb1)
Emb1<-c() #embedding vector#
sp<-colnames(data_plankton_ts) #picking the colnames#
par(mfrow = c(1,1),mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0)) #parameters to the plots#
for(i in 2:16){ ##to run over all species of planktons##
nome<-sp[i] #name variable to set plot with it#
lib<-c(1, NROW(data_plankton_ts[,i])) #defining the lib size used to simplex algorithmic#
pred<-lib #same as above#
simplex_output<-simplex(as.data.frame(data_plankton_ts)[,i],
lib = lib,
pred = pred,
E = 1:20,
silent = TRUE,
tp = tp_simplex1
) #simplex method function calling#
#par(mfrow = c(1,1),mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))
#savename<-paste("~/Dropbox/plankton_marina/data/embeddings/embedding_",sep = "", nome, tp_simplex1, ".png") #saving name to be set on the archive and as title of the plot#
#png(savename, width = 800, height = 600) #png ambient to save the figure as a png figure#
#plot(simplex_output$E, simplex_output$rho, type = "b", xlab = "Dimensão de Embedding (E)",
#     ylab = expression(paste(sep = "",rho)), main = paste(nome, sep = "_tp_",tp_simplex1), cex.lab=1.5) #plot function with extra parameters to plotting#
emax<-which.max(simplex_output$rho) #picking the maximum of embedding dimension#
#lines(rho[emax] ~ E[emax], data = simplex_output, type = "b", col  =  "red", lwd=2, pch=19) #setting the maximum emebedding dimension on the plot#
Emb1[i]<-emax #placing the maximum into the embedding vector for the record and future uses#
#dev.off() #shutting down the png ambient#
}
data.frame(sp,Emb1)
Emb1 = c(NA, 3,3,5,2,2,2,1,2,2,5,3,10,3,5,5)
theta1<-c()
sp<-colnames(data_plankton_ts)
par(mfrow = c(1,1), mar = c(4,4,1,1), mgp =  c(2.5,1,0))
for (i in 2:16) {
nome<-sp[i]
lib<-c(1, NROW(data_plankton_ts[,i]))
pred<-lib
s_map_output<-s_map(as.data.frame(data_plankton_ts)[,i],
lib = lib,
pred = pred,
E = Emb1[i],
theta = c(0, 1e-04, 3e-04, 0.001,0.003, 0.01, 0.03, 0.1, 0.3, 0.5, 0.75, 1, 1.5, 2, 3, 4, 6, 8),
silent = TRUE,
save_smap_coefficients = TRUE)
savename<-paste("output/GOM/theta/theta_",sep = "", nome, ".png") #saving name to be set on the archive and as title of the plot#
png(savename, width = 800, height = 600) #png ambient to save the figure as a png figure#
plot(s_map_output$theta, s_map_output$rho, type = "b", xlab = expression(paste("Theta (", sep = "", theta, ")")),ylab = expression(paste(sep = "",rho)), main = nome , cex.lab = 1.5)
thetamax<-which.max(s_map_output$rho)
lines(rho[thetamax]~theta[thetamax], data = s_map_output, type = "b", col = "red", lwd = 2, pch = 19)
theta1[i]<-thetamax
dev.off()
}
theta1
data.frame(sp,theta1)
E_n1<-as.data.frame(matrix(data = NA, nrow = 14, ncol = 15))
sp<-colnames(data_plankton_ts)
colnames(E_n1)<-sp[2:16]
i=2
j=3
E_n1<-as.data.frame(matrix(data = NA, nrow = 14, ncol = 15))
sp<-colnames(data_plankton_ts)
colnames(E_n1)<-sp[2:16]
E_max_ccm<-data.frame()
E.test.1=NULL
cmxy.t<-list()
E.t = 2
cmxy.t <- ccm(data_plankton_ts, E = E.t, lib_column = sp[i], target_column = sp[j],
lib_sizes = 203, num_samples = 1, tp=-1,random_libs = F, silent = TRUE)
rbind(E.test.1,cmxy.t)
}
rbind(E.test.1,cmxy.t)
cmxy.t
for(E.t in 2:10){ ##to run over different embedding dimensions##
cmxy.t <- ccm(data_plankton_ts, E = E.t, lib_column = sp[i], target_column = sp[j],
lib_sizes = 203, num_samples = 1, tp=-1,random_libs = F, silent = TRUE)
E.test.1=rbind(E.test.1,cmxy.t)
}
E.test.1
for(E.t in 1:10){ ##to run over different embedding dimensions##
cmxy.t <- ccm(data_plankton_ts, E = E.t, lib_column = sp[i], target_column = sp[j],
lib_sizes = 203, num_samples = 1, tp=-1,random_libs = F, silent = TRUE)
E.test.1=rbind(E.test.1,cmxy.t)
}
E.test.1
E.test.1=NULL
cmxy.t<-list()
for(E.t in 1:10){ ##to run over different embedding dimensions##
cmxy.t <- ccm(data_plankton_ts, E = E.t, lib_column = sp[i], target_column = sp[j],
lib_sizes = 203, num_samples = 1, tp=-1,random_libs = F, silent = TRUE)
E.test.1=rbind(E.test.1,cmxy.t)
}
E.test.1
E.test.1=NULL
cmxy.t<-list()
for(E.t in 1:20){ ##to run over different embedding dimensions##
cmxy.t <- ccm(data_plankton_ts, E = E.t, lib_column = sp[i], target_column = sp[j],
lib_sizes = 203, num_samples = 1, tp=-1,random_libs = F, silent = TRUE)
E.test.1=rbind(E.test.1,cmxy.t)
}
E_n1[i-1, j-1] <- which.max(E.test.1$rho) # the optimal E
E.test.1=NULL
cmxy.t<-list()
for(E.t in 1:20){ ##to run over different embedding dimensions##
cmxy.t <- ccm(data_plankton_ts, E = E.t, lib_column = sp[i], target_column = sp[j],
lib_sizes = 203, num_samples = 1, tp=-1,random_libs = F, silent = TRUE)
E.test.1=rbind(E.test.1,cmxy.t)
}
E.test.1
which.max(E.test.1$rho)
E_n1[i-1, j-1] <- which.max(E.test.1$rho) # the optimal E
paste(sp[i], sep = "_", "xmap", sp[j])
paste("output/GOM/ccm_embed_plots/ccm_emb",sp[i], "xmap", sp[j],".png",sep = "_")
if (!file.exists("output/GOM/ccm_embed_plots")){ dir.create("output/GOM/ccm_embed_plots/") }
###Embedding by CCM, which optimatize the embedding dimensions by CCM function###
if (!file.exists("output/GOM/ccm_embed_plots")){ dir.create("output/GOM/ccm_embed_plots/") } # creating output folder for plots
E_n1<-as.data.frame(matrix(data = NA, nrow = 14, ncol = 15))
sp<-colnames(data_plankton_ts)
colnames(E_n1)<-sp[2:16]
for (i in 2:15) { ##To run over each species##
for (j in 2:16) { ##To run over each species differing from the first one##
if(i == j)next
E_max_ccm<-data.frame()
#E_max_ccm<-colnames(sp[2:16])
E.test.1=NULL
cmxy.t<-list()
for(E.t in 1:20){ ##to run over different embedding dimensions##
cmxy.t <- ccm(data_plankton_ts, E = E.t, lib_column = sp[i], target_column = sp[j],
lib_sizes = 203, num_samples = 1, tp=-1,random_libs = F, silent = TRUE)
E.test.1=rbind(E.test.1,cmxy.t)
}
E_n1[i-1, j-1] <- which.max(E.test.1$rho) # the optimal E
savename<-paste("output/GOM/ccm_embed_plots/ccm_emb",sp[i], "xmap", sp[j],".png",sep = "_") #saving name to be set on the archive and as title of the plot#
png(savename, width = 800, height = 600) #png ambient to save the figure as a png figure#
#par(mfrow = c(1,1), mar = c(4,4,1,1), mgp =  c(2.5,1,0))
#plot(E.test.1$E, E.test.1$rho, type = "b",
#     ylab = expression(paste(sep = "", rho)),
#     xlab = "Embedding dimension (E)",
#     main = paste(sp[i], sep = "_", "xmap", sp[j]))
#lines(rho[E_n1[i-1, j-1]]~E[E_n1[i-1, j-1]], data = E.test.1, type = "b", col =  "red", lwd = 2, pch = 19)
}
}
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
if (!file.exists("output/GOM/ccm_embed_plots")){ dir.create("output/GOM/ccm_embed_plots/") } # creating output folder for plots
E_n1<-as.data.frame(matrix(data = NA, nrow = 14, ncol = 15))
sp<-colnames(data_plankton_ts)
colnames(E_n1)<-sp[2:16]
for (i in 2:15) { ##To run over each species##
for (j in 2:16) { ##To run over each species differing from the first one##
if(i == j)next
E_max_ccm<-data.frame()
#E_max_ccm<-colnames(sp[2:16])
E.test.1=NULL
cmxy.t<-list()
for(E.t in 1:20){ ##to run over different embedding dimensions##
cmxy.t <- ccm(data_plankton_ts, E = E.t, lib_column = sp[i], target_column = sp[j],
lib_sizes = 203, num_samples = 1, tp=-1,random_libs = F, silent = TRUE)
E.test.1=rbind(E.test.1,cmxy.t)
}
E_n1[i-1, j-1] <- which.max(E.test.1$rho) # the optimal E
savename<-paste("output/GOM/ccm_embed_plots/ccm_emb",sp[i], "xmap", sp[j],".png",sep = "_") #saving name to be set on the archive and as title of the plot#
png(savename, width = 800, height = 600) #png ambient to save the figure as a png figure#
par(mfrow = c(1,1), mar = c(4,4,1,1), mgp =  c(2.5,1,0))
plot(E.test.1$E, E.test.1$rho, type = "b",
ylab = expression(paste(sep = "", rho)),
xlab = "Embedding dimension (E)",
main = paste(sp[i], sep = "_", "xmap", sp[j]))
lines(rho[E_n1[i-1, j-1]]~E[E_n1[i-1, j-1]], data = E.test.1, type = "b", col =  "red", lwd = 2, pch = 19)
dev.off()
}
}
