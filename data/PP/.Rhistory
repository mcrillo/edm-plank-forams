## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite()
install.packages("dplyr")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("stringr")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("stringr")
install.packages("ggtree")
biocLite("ggree")
biocLite("ggtree")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("ggtree")
lubrary(ggtree)
library(ggtree)
library(ggtree)
install.packages("Rcpp")
install.packages(file.choose(), type = "source", repos = NULL)
library("rEDM")
library(rEDM)
library(rEDM)
data(tentmap_del)
head(tentmap_del)
library("rEDM")
data(tentmap_del)
library(devtools)
install_github("ha0ye/rEDM")
vignette("rEDM-tutorial")
library(rEDM)
data(tentmap_del)
head(tentmap_del)
str(tentmap_del)
ts <- tentmap_del
lib <- c(1, 100)
pred <- c(201, 500)
simplex_output <- simplex(ts, lib, pred)
str(simplex_output)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
data(block_3sp)
str(block_3sp)
cols <- c(1, 2, 4)  # c('x_t', 'x_t-1', 'y_t')
target <- 1  # 'x_t'
block_lnlp_output <- block_lnlp(block_3sp, lib = lib, pred = pred, columns = cols,
target_column = target, stats_only = FALSE, first_column_time = TRUE)
str(block_lnlp_output)
block_lnlp_output <- block_lnlp(block_3sp, lib = lib, pred = pred, columns = cols,
target_column = target, stats_only = FALSE, first_column_time = TRUE)
x <- readClipboard()
x <- read.table(file = "clipboard", sep = "t", header=TRUE)
x
x <- read.table(file = "clipboard", sep = "t", header=TRUE)
x <- read.table(pipe("pbpaste"), sep="\t", header=TRUE) # for a data frame
x
str(x)
plot(x[,2]~x[,1])
plot(x[,3]~x[,1])
library(knitr)#; library(zoo); library(xts)
library(rEDM)
library(ggplot2)#; library(cowplot)
library(dplyr); library(tidyr)
library(deSolve)
library(xts)
library(rgl)
library(scatterplot3d)
opts_chunk$set(fig.align = 'center',
fig.show = 'hold',
fig.height = 5,
warning = FALSE, message = FALSE, error = FALSE, echo=FALSE)
options(formatR.arrow = TRUE,width = 90)###, cache=TRUE)
install.packages("rEDM")
library(knitr)#; library(zoo); library(xts)
library(rEDM)
library(rEDM)
library(ggplot2)#; library(cowplot)
library(dplyr); library(tidyr)
library(ggplot2)#; library(cowplot)
library(dplyr); library(tidyr)
library(deSolve)
library(rgl)
library(scatterplot3d)
opts_chunk$set(fig.align = 'center',
fig.show = 'hold',
fig.height = 5,
warning = FALSE, message = FALSE, error = FALSE, echo=FALSE)
options(formatR.arrow = TRUE,width = 90)##
vignette("rEDM-tutorial", package="rEDM")
time1<-seq(1, 100, by = 0.2)
x1<-sin(time1)
y1<-cos(time1)
plot(x1, y1, type = 'p', main = "State-space of harmonic oscilator",
cex=0.2, xlab="X", ylab="Y")
plot(time1, x1, type = 'l', main = "Time series of the variables of the system", col = "red")
lines(time1, y1, col = "blue")
plot(time1, x1, type = 'l', main = "Time series of the variables of the system", col = "red")
lines(time1, y1, col = "blue")
plot(time1, x1, type = 'l', main = "Time series of the variables of the system", col = "red")
lines(time1, y1, col = "blue")
vignette("rEDM-tutorial", package="rEDM")
library(knitr)#; library(zoo); library(xts)
library(plotly)
library(rEDM)
library(ggplot2)#; library(cowplot)
library(dplyr); library(tidyr)
## Two vectors to store data
X <- c()
Y <- c()
## Initial values
X[1] <- 0.1
Y[1] <- 0.3
X[2] <- 0.3
Y[2] <- 3.78*Y[1] - 3.78*Y[1]^2
## Iterate the dynamics 150 time steps
for(i in 3:150){
X[i] <- 3.77*X[i-1] - 3.77*X[i-1]^2 - 0.85*Y[i-1]*X[i-1] - 0.5*X[i-2]
Y[i] <- 3.78*Y[i-1] - 3.78*Y[i-1]^2
}
X
Y
predE3 <- simplex(time_series = X, E = 3, stats_only = FALSE)
library(rEDM)
predE3 <- simplex(time_series = X, E = 3, stats_only = FALSE)
## Two vectors to store data
X <- c()
Y <- c()
## Initial values
X[1] <- 0.1
Y[1] <- 0.3
X[2] <- 0.3
Y[2] <- 3.78*Y[1] - 3.78*Y[1]^2
## Iterate the dynamics 150 time steps
for(i in 3:150){
X[i] <- 3.77*X[i-1] - 3.77*X[i-1]^2 - 0.85*Y[i-1]*X[i-1] - 0.5*X[i-2]
Y[i] <- 3.78*Y[i-1] - 3.78*Y[i-1]^2
}
predE3 <- simplex(time_series = X, E = 3, stats_only = FALSE)
predE3 <- simplex(time_series = X, E = 3, stats_only = FALSE)
fits <- predE3$model_output[[1]]
plot(pred ~ time, data = fits, type = "l", col = "blue", lwd=3,
xlab="Time", ylab="X", ylim=range(fits[,2:3]))
lines(obs ~ time, data = fits, col=grey.colors(1, alpha=0.25), lwd = 6)
legend("topright", c("Observed", "Predicted"), lty=1, lwd=c(6,3),
col=c(grey.colors(1, alpha=0.25), "blue"),bty="n")
plot(pred ~ time, data = fits, type = "l", col = "blue", lwd=3,
xlab="Time", ylab="X", ylim=range(fits[,2:3]))
lines(obs ~ time, data = fits, col=grey.colors(1, alpha=0.25), lwd = 6)
legend("topright", c("Observed", "Predicted"), lty=1, lwd=c(6,3),
col=c(grey.colors(1, alpha=0.25), "blue"),bty="n")
predE2 <- simplex(time_series = X, E = c(2,3,10), stats_only = FALSE)
par(mfrow=c(1,3))
plot(pred ~ obs, data = predE2$model_output[[1]],
main = bquote("Embedding = 2, " ~ rho == .(round(predE2$rho[1],2))))
plot(pred ~ obs, data = predE2$model_output[[2]],
main = bquote("Embedding = 3, " ~ rho == .(round(predE2$rho[2],2))))
plot(pred ~ obs, data = predE2$model_output[[3]],
main = bquote("Embedding = 10, " ~ rho == .(round(predE2$rho[3],2))))
par(mfrow=c(1,1))
find.emb <- simplex(time_series = X, E = 1:10)
plot(rho ~ E, data=find.emb, type="b",
xlab = "Embedding dimensions",
ylab = expression(paste("Forecast skill (",rho,")",sep="")))
find.emb <- simplex(time_series = X, E = 1:10)
plot(rho ~ E, data=find.emb, type="b",
xlab = "Embedding dimensions",
ylab = expression(paste("Forecast skill (",rho,")",sep="")))
find.emb <- simplex(time_series = X, E = 1:10)
plot(rho ~ E, data=find.emb, type="b",
xlab = "Embedding dimensions",
ylab = expression(paste("Forecast skill (",rho,")",sep="")))
predE3tp5 <- simplex(time_series = X, E = 3, tp = 5, stats_only = FALSE)
fitstp5 <- predE3tp5$model_output[[1]]
plot(pred ~ obs, data = fitstp5)
points(pred ~ obs, data = fitstp5[nrow(fitstp5),], col = "blue", pch=19)
plot(pred ~ time, data = fitstp5, type = "l", col = "blue", lwd=3,
xlab="Time", ylab="X", ylim=range(fitstp5[,2:3]))
lines(obs ~ time, data = fitstp5, col=grey.colors(1, alpha=0.25), lwd = 6)
legend("topright", c("Observed", "Predicted"), lty=1, lwd=c(6,3),
col=c(grey.colors(1, alpha=0.25), "blue"),bty="n", cex=1.5)
dev.off()
predE3tp5 <- simplex(time_series = X, E = 3, tp = 5, stats_only = FALSE)
fitstp5 <- predE3tp5$model_output[[1]]
plot(pred ~ obs, data = fitstp5)
points(pred ~ obs, data = fitstp5[nrow(fitstp5),], col = "blue", pch=19)
plot(pred ~ time, data = fitstp5, type = "l", col = "blue", lwd=3,
xlab="Time", ylab="X", ylim=range(fitstp5[,2:3]))
lines(obs ~ time, data = fitstp5, col=grey.colors(1, alpha=0.25), lwd = 6)
legend("topright", c("Observed", "Predicted"), lty=1, lwd=c(6,3),
col=c(grey.colors(1, alpha=0.25), "blue"),bty="n", cex=1.5)
pred.decay <- simplex(time_series = X, E = 3, tp = 1:10)
plot(rho ~ tp, data=pred.decay,
type = "b",
xlab = "Time to prediction",
ylab = expression(paste("Forecast skill (",rho,")",sep="")))
X2 <- c()
X2[1] <- 0.5
for(i in 2:150)
X2[i] <- 3.569949 * X2[i-1] * ( 1- X2[i-1] )
## Plots the series
plot(X2, xlab="Time", ylab="X", type="b", lty=3)
find.emb2 <- simplex(time_series = X2, E = 1:10)
plot(rho ~ E, data=find.emb2, type="b",
ylim=c(0,1),
xlab = "Embedding dimensions",
ylab = expression(paste("Forecast skill (",rho,")",sep="")))
find.emb2 <- simplex(time_series = X2, E = 1:10)
plot(rho ~ E, data=find.emb2, type="b",
ylim=c(0,1),
xlab = "Embedding dimensions",
ylab = expression(paste("Forecast skill (",rho,")",sep="")))
pred.decay2 <- simplex(time_series = X2, E = 6, tp = 1:50)
plot(rho ~ tp, data=pred.decay2,
type = "l",
xlab = "Time to prediction",
ylab = expression(paste("Forecast skill (",rho,")",sep="")),
ylim = c(0,1))
## Adding noise
X3 <- X2 + rnorm(n = length(X2), mean = 0, sd = sd(X2))
## Plot series
plot(X3, xlab="Time", ylab="X", type="b", lty=3)
## Adding noise
X3 <- X2 + rnorm(n = length(X2), mean = 0, sd = sd(X2))
## Plot series
plot(X3, xlab="Time", ylab="X", type="b", lty=3)
pred.decay3 <- simplex(time_series = X3, E = 6, tp = 1:50)
plot(rho ~ tp, data=pred.decay3,
type = "l",
xlab = "Time to prediction",
ylab = expression(paste("Forecast skill (",rho,")",sep="")),
ylim = c(0,1))
library(knitr)#; library(zoo); library(xts)
library(plotly)
library(rEDM)
library(ggplot2)#; library(cowplot)
library(dplyr); library(tidyr)
opts_chunk$set(fig.align = 'center',
fig.show = 'hold',
fig.height = 5,
warning = FALSE, message = FALSE, error = FALSE, echo=FALSE)
options(formatR.arrow = TRUE,width = 90)###, cache=TRUE)
## Two vectors to store data
X <- c()
Y <- c()
## Initial values
X[1] <- 0.1
Y[1] <- 0.3
X[2] <- 0.3
Y[2] <- 3.78*Y[1] - 3.78*Y[1]^2
## Iterate the dynamics 150 time steps
for(i in 3:150){
X[i] <- 3.77*X[i-1] - 3.77*X[i-1]^2 - 0.85*Y[i-1]*X[i-1] - 0.5*X[i-2]
Y[i] <- 3.78*Y[i-1] - 3.78*Y[i-1]^2
}
plot(X, xlab="Time", ylab="X", type="b", lty=3)
## Data frame with X at t0, t1 and t2
df1 <- data.frame(X.t0=X[1:(length(X)-2)],X.t1=X[2:(length(X)-1)],  X.t2=X[3:(length(X))])
## point to point Euclidian distance matrix
dist.m1 <- as.matrix(dist(df1[,1:3], upper=TRUE))
## Indexes of the 4 nearest neighbors of the last point in the time series
neigb1 <- order(dist.m1[(ncol(dist.m1)-1),])[2:5]
## Plot of the manifold: add colored markers on last point and their neighbors
p3 <- plot_ly(df1, x = ~X.t0, y=~X.t1, z=~X.t2, marker=(list(color=grey)), opacity=0.25) %>%
layout(scene = list(xaxis = list(title = 'X'),
yaxis = list(title = 'X (t+1)'),
zaxis = list(title = 'X (t+2)'))) %>%
add_markers(text = paste("time =",3:length(X)), showlegend = FALSE) %>%
add_trace( x = ~X.t0, y=~X.t1, z=~X.t2, data=df1[c(length(X)-3,neigb1),],
opacity=1,
marker=list(color=c("blue","red","green","orange", "magenta")),
type="scatter3d", mode="markers",
text = paste("time =",rownames(df1[c(length(X)-3,neigb1),])), showlegend = FALSE) %>%
add_trace(data=df1[c(length(X)-3, neigb1[1]),], mode="lines",
line = list(width = 6, color = "blue"), showlegend = FALSE) %>%
add_trace(data=df1[c(length(X)-3, neigb1[2]),], mode="lines",
line = list(width = 6, color = "blue"), showlegend = FALSE)%>%
add_trace(data=df1[c(length(X)-3, neigb1[3]),], mode="lines",
line = list(width = 6, color = "blue"), showlegend = FALSE) %>%
add_trace(data=df1[c(length(X)-3, neigb1[4]),], mode="lines",
line = list(width = 6, color = "blue"), showlegend = FALSE)
p3
time1 <- min(neigb1,length(X)):length(X) # syntatic sugar
plot(time1, X[time1] , xlab="Time", ylab="X", type="b", lty=3)
cores <- c("blue", "red","green","orange", "magenta")
z <- 1
for(i in c(length(X)-3,neigb1)){
ind <- i:(i+2)
lines(ind, X[ind], type="b", col=cores[z], lwd=2, pch=19)
z <- z+1}
plot(time1, X[time1] , xlab="Time", ylab="X", type="b", lty=3)
cores <- c("blue", "red","green","orange", "magenta")
z <- 1
for(i in c(length(X)-2,neigb1+1)){
ind <- i:(i+2)
lines(ind, X[ind], type="b", col=cores[z], lwd=2, pch=19)
z <- z+1}
arrows(x0=neigb1+3, y0=X[neigb1+3], x1=length(X)*.99, y1=X[neigb1+3],
col=cores[-1])
points(length(X), X[length(X)], pch=17, cex=1.5)
s1 <- simplex(X, E=3, stats_only=FALSE)$model_output[[1]]
p1.last <- s1$pred[nrow(s1)]
pred.df <- df1[c(length(X)-2,neigb1+1),]
pred.df[1,3] <- p1.last
p4 <-
p3 %>%
add_trace( x = ~X.t0, y=~X.t1, z=~X.t2, data=pred.df,
marker=list(color=c("black","red","green","orange", "magenta")),
type="scatter3d", mode="marker",opacity=1,
text = paste("time = ",rownames(pred.df)), showlegend = FALSE) %>%
add_trace(data=pred.df[c(1,2),], mode="lines",
line = list(width = 6, color = "blue"), showlegend = FALSE) %>%
add_trace(data=pred.df[c(1,3),], mode="lines",
line = list(width = 6, color = "blue"), showlegend = FALSE) %>%
add_trace(data=pred.df[c(1,4),], mode="lines",
line = list(width = 6, color = "blue"), showlegend = FALSE) %>%
add_trace(data=pred.df[c(1,5),], mode="lines",
line = list(width = 6, color = "blue"), showlegend = FALSE) %>%
add_trace( x = ~X.t0, y=~X.t1, z=~X.t2, data=df1[nrow(df1),],
opacity=1,
marker=list(color=c("blue")),
type="scatter3d", mode="markers")
#p4
htmlwidgets::saveWidget(as_widget(p4), file = "p4.html")
include_url("p4.html", height="600px")
nich97I <- read.csv("https://www.stat.berkeley.edu/~brill/blowfly97I")
plot(nich97I$total, type="b", xlab="Time", ylab="Total number of flies")
install.packages(c("ade4", "adehabitatHR", "adehabitatLT", "adehabitatMA", "adephylo", "backports", "BoSSA", "caret", "chron", "circlize", "cowplot", "crul", "ctv", "curl", "dfoptim", "digest", "dotCall64", "DRR", "earth", "ecospat", "foreach", "fpc", "GenSA", "git2r", "haven", "hexbin", "Hmisc", "HMP", "hms", "htmlTable", "htmlwidgets", "irlba", "iterators", "KFAS", "knitr", "ks", "lava", "lme4", "MASS", "mclust", "mgcv", "msm", "pbapply", "phyclust", "phylotools", "plotrix", "pomp", "pracma", "quantmod", "rasterVis", "Rcpp", "RcppArmadillo", "RCurl", "recipes", "registry", "reshape2", "rgdal", "rgl", "rlang", "Rmpfr", "rms", "rpart", "rprojroot", "rsq", "segmented", "sf", "sp", "spam", "spatstat", "spatstat.utils", "spdep", "stargazer", "tibble", "tm", "tmap", "tmaptools", "units", "urltools", "vegan", "viridis", "webshot", "wikitaxa", "withr", "xts", "yaml", "zoo"))
install.packages(c("ade4", "adehabitatHR", "adehabitatLT", "adehabitatMA", "adephylo", "backports", "BoSSA", "caret", "chron", "circlize", "cowplot", "crul", "ctv", "curl", "dfoptim", "digest", "dotCall64", "DRR", "earth", "ecospat", "foreach", "fpc", "GenSA", "git2r", "haven", "hexbin", "Hmisc", "HMP", "hms", "htmlTable", "htmlwidgets", "irlba", "iterators", "KFAS", "knitr", "ks", "lava", "lme4", "MASS", "mclust", "mgcv", "msm", "pbapply", "phyclust", "phylotools", "plotrix", "pomp", "pracma", "quantmod", "rasterVis", "Rcpp", "RcppArmadillo", "RCurl", "recipes", "registry", "reshape2", "rgdal", "rgl", "rlang", "Rmpfr", "rms", "rpart", "rprojroot", "rsq", "segmented", "sf", "sp", "spam", "spatstat", "spatstat.utils", "spdep", "stargazer", "tibble", "tm", "tmap", "tmaptools", "units", "urltools", "vegan", "viridis", "webshot", "wikitaxa", "withr", "xts", "yaml", "zoo"))
install.packages(c("ade4", "adehabitatHR", "adehabitatLT", "adehabitatMA", "adephylo", "backports", "BoSSA", "caret", "chron", "circlize", "cowplot", "crul", "ctv", "curl", "dfoptim", "digest", "dotCall64", "DRR", "earth", "ecospat", "foreach", "fpc", "GenSA", "git2r", "haven", "hexbin", "Hmisc", "HMP", "hms", "htmlTable", "htmlwidgets", "irlba", "iterators", "KFAS", "knitr", "ks", "lava", "lme4", "MASS", "mclust", "mgcv", "msm", "pbapply", "phyclust", "phylotools", "plotrix", "pomp", "pracma", "quantmod", "rasterVis", "Rcpp", "RcppArmadillo", "RCurl", "recipes", "registry", "reshape2", "rgdal", "rgl", "rlang", "Rmpfr", "rms", "rpart", "rprojroot", "rsq", "segmented", "sf", "sp", "spam", "spatstat", "spatstat.utils", "spdep", "stargazer", "tibble", "tm", "tmap", "tmaptools", "units", "urltools", "vegan", "viridis", "webshot", "wikitaxa", "withr", "xts", "yaml", "zoo"))
install.packages(c("ade4", "adehabitatHR", "adehabitatLT", "adehabitatMA", "adephylo", "backports", "BoSSA", "caret", "chron", "circlize", "cowplot", "crul", "ctv", "curl", "dfoptim", "digest", "dotCall64", "DRR", "earth", "ecospat", "foreach", "fpc", "GenSA", "git2r", "haven", "hexbin", "Hmisc", "HMP", "hms", "htmlTable", "htmlwidgets", "irlba", "iterators", "KFAS", "knitr", "ks", "lava", "lme4", "MASS", "mclust", "mgcv", "msm", "pbapply", "phyclust", "phylotools", "plotrix", "pomp", "pracma", "quantmod", "rasterVis", "Rcpp", "RcppArmadillo", "RCurl", "recipes", "registry", "reshape2", "rgdal", "rgl", "rlang", "Rmpfr", "rms", "rpart", "rprojroot", "rsq", "segmented", "sf", "sp", "spam", "spatstat", "spatstat.utils", "spdep", "stargazer", "tibble", "tm", "tmap", "tmaptools", "units", "urltools", "vegan", "viridis", "webshot", "wikitaxa", "withr", "xts", "yaml", "zoo"))
library("rEDM")
help("make_block")
?lmerTest
help(lmerTest)
cite("lme4")
citation("lme4")
version("lme4")
packageVersion("lme4")
install.packages("hdf5r")
library("rhdf5")
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/projects")
setwd("./time-series-forams/data/PP/")
files <- list.files()
files
files <- list.files(pattern = ".gz")
files
i = 1
gunzip(files[i])
ungzip(files[i])
gzip(files[i])
?gunzip
??gunzip
library(R.utils)
gunzip(files[i])
